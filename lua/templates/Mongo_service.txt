using MongoDB.Driver;
using API.Resources;
namespace API.Services
{

    public interface IStocksService<Stocks>
    {
        Task<IEnumerable<Stocks>> GetAllAsync();
        Task<Stocks> GetByIdAsync(string id);
        Task<Stocks> CreateAsync(Stocks entity);
        Task<Stocks> UpdateAsync(string id, Stocks entity);
        Task DeleteAsync(string id);
    }

    public class StocksService<Stocks> : IStocksService<Stocks> where Stocks : class
    {
        private readonly IMongoCollection<Stocks> collection;

        public StocksService()
        {
            var dbConnection = new DBConnection();
            collection = dbConnection.GetDatabase("repository").GetCollection<Stocks>("stocks");
        }

        public async Task<IEnumerable<Stocks>> GetAllAsync()
        {
            return await collection.Find(_ => true).ToListAsync();
        }

        public async Task<Stocks> GetByIdAsync(string id)
        {
            var filter = Builders<Stocks>.Filter.Eq("_id", id);
            return await collection.Find(filter).FirstOrDefaultAsync();
        }

        public async Task<Stocks> CreateAsync(Stocks entity)
        {
            await collection.InsertOneAsync(entity);
            return entity;
        }

        public async Task<Stocks> UpdateAsync(string id, Stocks entity)
        {
            var filter = Builders<Stocks>.Filter.Eq("_id", id);
            await collection.ReplaceOneAsync(filter, entity);
            return entity;
        }

        public async Task DeleteAsync(string id)
        {
            var filter = Builders<Stocks>.Filter.Eq("_id", id);
            await collection.DeleteOneAsync(filter);
        }
    }

}
